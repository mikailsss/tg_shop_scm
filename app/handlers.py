import logging
import os
from aiogram import Router, Bot, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import ADMIN_LIST, BOT_TOKEN, CRYPTO_BOT_TOKEN, LOLZ_TOKEN, LOLZ_LINK
from database.requests import (
    new_user, get_categories, get_category, get_available_items,
    create_purchases, delete_items, update_user_balance, get_user_balance,
    add_items_from_file, get_user_balance_and_top_up, get_purchase_history
)
from .keyboards import (
    start_kb, admin_start_kb, buy_category_keyboard, add_category_keyboard,
    buy_buy_item, create_user_profile, top_up_cancel_kb,
    choose_payment, lolz_top_up_kb
)
from aiocryptopay import AioCryptoPay

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CRYPTO_PAY = AioCryptoPay(CRYPTO_BOT_TOKEN)
router = Router()
bot = Bot(BOT_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ItemStates(StatesGroup):
    category = State()
    file = State()
    quantity = State()

class CryptoPayment(StatesGroup):
    amount = State()
    tg_id = State()

class LolzPayment(StatesGroup):
    amount = State()
    tg_id = State()
    order_id = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await new_user(message.from_user.id)
    kb = await admin_start_kb(message.from_user.id) if message.from_user.id in ADMIN_LIST else await start_kb(message.from_user.id)
    await message.answer(
        f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! üõçÔ∏è\n'
        '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:',
        reply_markup=kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
@router.callback_query(F.data == 'get_menu')
async def cmd_start_keck(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    kb = await admin_start_kb(callback.from_user.id) if callback.from_user.id in ADMIN_LIST else await start_kb(callback.from_user.id)
    await callback.message.edit_text(
        f'üëã –ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! üõçÔ∏è\n'
        '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:',
        reply_markup=kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
@router.callback_query(F.data == 'items')
async def cmd_get_category(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        'üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:',
        reply_markup=await buy_category_keyboard(await get_categories())
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith('choose_'))
async def cmd_buy_item(callback: CallbackQuery):
    try:
        await callback.answer()
        category_id = int(callback.data.split('_')[1])
        category_data = await get_category(category_id)
        
        if not category_data:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ú–µ–Ω—é - /start")
            return
        
        items_count = len(await get_available_items(category_id, 1000))
        await callback.message.edit_text(
            f'üéâ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_data.name}\n'
            f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: {category_data.desc}\n'
            f'üì¶ –ù–∞–ª–∏—á–∏–µ: {items_count} —à—Ç.\n'
            f'üíµ –¶–µ–Ω–∞: {category_data.price} —Ä—É–±. –∑–∞ –æ–¥–Ω—É –ø–æ—á—Ç—É',
            reply_markup=await buy_buy_item(category_id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_buy_item: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.\n–ú–µ–Ω—é - /start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏
@router.callback_query(F.data.startswith('buy_'))
async def handle_buy_start(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        category_id = int(callback.data.split('_')[1])
        await state.update_data(category_id=category_id)
        await state.set_state(ItemStates.quantity)
        await callback.message.answer("üî¢ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—á—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_buy_start: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.\n–ú–µ–Ω—é - /start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
@router.message(ItemStates.quantity)
async def handle_buy_quantity(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        category_id = data.get('category_id')
        category = await get_category(category_id)
        user_tg_id = message.from_user.id
        
        if not message.text.isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!\n–ú–µ–Ω—é - /start")
            return
        
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!\n–ú–µ–Ω—é - /start")
            return
        
        available_items = await get_available_items(category_id, quantity)
        if len(available_items) < quantity:
            await message.answer(f"‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {len(available_items)} —à—Ç.")
            return
        
        total_price = category.price * quantity
        user_balance = await get_user_balance(user_tg_id)
        if user_balance < total_price:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {total_price} —Ä—É–±.\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_balance} —Ä—É–±.\n–ú–µ–Ω—é - /start")
            return
        
        await update_user_balance(user_tg_id, -total_price)
        await create_purchases(user_tg_id, category_id, available_items)
        await delete_items(available_items)
        
        items_info = "\n".join(f"{item.login}" for item in available_items)
        await message.answer(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ {quantity} —à—Ç.\n"
            f"üí∏ –°–ø–∏—Å–∞–Ω–æ: {total_price} —Ä—É–±.\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
            f"üì¶ –î–∞–Ω–Ω—ã–µ:\n\n{items_info}\n\n"
            '–ú–µ–Ω—é - /start'
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_buy_quantity: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.\n–ú–µ–Ω—é - /start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Lolz
@router.callback_query(F.data.startswith('lolz_'))
async def create_lolz_payment(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        await state.clear()
        tg_id = int(callback.data.split('_')[1])
        await state.update_data(tg_id=tg_id)
        await callback.message.edit_text(
            'üí≥ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:',
            reply_markup=await top_up_cancel_kb(tg_id)
        )
        await state.set_state(LolzPayment.amount)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_lolz_payment: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n–ú–µ–Ω—é - /start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Lolz
@router.message(LolzPayment.amount)
async def top_up_end(message: Message, state: FSMContext):
    try:
        if not message.text.isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!\n–ú–µ–Ω—é - /start")
            return
        
        amount = int(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!\n–ú–µ–Ω—é - /start")
            return
        
        order_id = os.urandom(15).hex()
        await state.update_data(order_id=order_id, amount=amount)
        
        pay_url = LOLZ_TOKEN.get_payment_link(amount=amount, comment=order_id)
        await message.answer(
            f'üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ {amount} —Ä—É–±. –ø–æ —Å—Å—ã–ª–∫–µ: {pay_url}\n\n'
            '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É".',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_lolz_payment_{order_id}")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ top_up_end: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n–ú–µ–Ω—é - /start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Lolz
@router.callback_query(F.data.startswith('check_lolz_payment_'))
async def check_lolz_payment(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        order_id = callback.data.split('_')[2]
        data = await state.get_data()
        amount = data.get('amount')
        tg_id = data.get('tg_id')
        
        if not amount or not tg_id:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ.\n–ú–µ–Ω—é - /start")
            return
        
        payment_info = await LOLZ_TOKEN.check_status_payment(amount, comment=order_id)
        if payment_info:
            await update_user_balance(tg_id, amount)
            await callback.message.answer(
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°—É–º–º–∞: {amount} —Ä—É–±.\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω. üéâ\n–ú–µ–Ω—é - /start"
            )
            await state.clear()
        else:
            await callback.message.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n–ú–µ–Ω—é - /start")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_lolz_payment: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n–ú–µ–Ω—é - /start")