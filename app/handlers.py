import logging
import os
from database.models import async_session
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Router, Bot, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import ADMIN_LIST, BOT_TOKEN, CRYPTO_BOT_TOKEN, LOLZ_TOKEN, USD_RUB_COURSE
from database.requests import (
    new_user, get_categories, get_category, get_available_items,
    create_purchases, delete_items, update_user_balance, get_user_balance,
    add_items_from_file, get_user_balance_and_top_up, get_purchase_history,
    admin_add_new_category_db, update_user_balance_in_db, update_user_balance_after_buy,
    admin_delete_category, edit_cat_price_db, edit_cat_desc_db, edit_cat_name_db,
    admin_delete_category_db, is_payment_processed, save_payment_order,
    check_user
)

from .keyboards import (
    start_kb, admin_start_kb, buy_category_keyboard, add_category_keyboard,
    buy_buy_item, create_user_profile, top_up_cancel_kb,
    choose_payment, manage_category_keyboard, manage_one_cat
)

from aiocryptopay import AioCryptoPay


CRYPTO_PAY = AioCryptoPay(CRYPTO_BOT_TOKEN)
router = Router()
bot = Bot(BOT_TOKEN)
crypto_Bot = CRYPTO_BOT_TOKEN

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ItemStates(StatesGroup):
    category = State()
    file = State()
    quantity = State()

class CryptoPayment(StatesGroup):
    amount = State()

class LolzPayment(StatesGroup):
    amount = State()
    tg_id = State()
    order_id = State()

class OrderState(StatesGroup):
    choosing_payment = State()
    waiting_for_payment = State()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class Userchange(StatesGroup):
    tg_id = State()
    new_balance = State()

class NewCategory(StatesGroup):
        name = State()
        desc = State()
        price = State()

class EditCategory(StatesGroup):
    cat_id = State()
    name = State()
    desc = State()
    price = State()


def get_main_menu_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="get_menu")]
    ])
def get_after_purchase_button(tg_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="get_menu")],
        [InlineKeyboardButton(text="–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data=f'history_{tg_id}')]
    ])
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    if await check_user(message.from_user.id):
        kb = await admin_start_kb(message.from_user.id) if message.from_user.id in ADMIN_LIST else await start_kb(message.from_user.id)
        await message.answer(
        f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! üõçÔ∏è\n'
        '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:',
        reply_markup=kb
        )
    else:
        await message.answer('–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∏–º –º–æ–∂–Ω–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: telegra.ph/Polzovatelskoe-soglashenie-03-16-12',
                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                 [InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å‚úÖ', callback_data='accept_agreements')]
                             ]))


@router.callback_query(F.data=='accept_agreements')
async def user_accept_agreements(callback: CallbackQuery):
    await callback.answer()
    await new_user(callback.from_user.id)
    kb = await admin_start_kb(callback.from_user.id) if callback.from_user.id in ADMIN_LIST else await start_kb(callback.from_user.id)
    await callback.message.edit_text(
        f'üëã –ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! üõçÔ∏è\n'
        '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:',
        reply_markup=kb
    )


@router.callback_query(F.data == 'get_menu')
async def cmd_start_keck(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    kb = await admin_start_kb(callback.from_user.id) if callback.from_user.id in ADMIN_LIST else await start_kb(callback.from_user.id)
    await callback.message.edit_text(
        f'üëã –ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! üõçÔ∏è\n'
        '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:',
        reply_markup=kb
    )

@router.callback_query(F.data == 'items')
async def cmd_get_category(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        'üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:',
        reply_markup=await buy_category_keyboard(await get_categories())
    )

@router.callback_query(F.data.startswith('choose_'))
async def cmd_buy_item(callback: CallbackQuery):
    try:
        await callback.answer()
        category_id = int(callback.data.split('_')[1])
        category_data = await get_category(category_id)
        
        if not category_data:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu_button())
            return
        items_count = len(await get_available_items(category_id, 1000))
        
        await callback.message.edit_text(
            f'üéâ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_data.name}\n'
            f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: {category_data.desc}\n'
            f'üì¶ –ù–∞–ª–∏—á–∏–µ: {items_count} —à—Ç.\n'
            f'üíµ –¶–µ–Ω–∞: {category_data.price} —Ä—É–±. –∑–∞ –æ–¥–Ω—É –ø–æ—á—Ç—É',
            reply_markup=await buy_buy_item(category_id)
        )
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_button())
        print(f"–û—à–∏–±–∫–∞ –≤ cmd_buy_item: {e}")

@router.callback_query(F.data.startswith('buy_'))
async def handle_buy_start(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        category_id = int(callback.data.split('_')[1])
        await state.update_data(category_id=category_id)
        await state.set_state(ItemStates.quantity)
        await callback.message.answer("üî¢ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—á—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:")
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_button())
        print(f"–û—à–∏–±–∫–∞ –≤ handle_buy_start: {e}")

@router.message(ItemStates.quantity)
async def handle_buy_quantity(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        category_id = data.get('category_id')
        category = await get_category(category_id)
        user_tg_id = message.from_user.id
        
        if not message.text.isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!", reply_markup=get_main_menu_button())
            return
        
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!", reply_markup=get_main_menu_button())
            return
        
        available_items = await get_available_items(category_id, quantity)
        if len(available_items) < quantity:
            await message.answer(f"‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {len(available_items)} —à—Ç.", reply_markup=get_main_menu_button())
            return
        
        total_price = category.price * quantity
        user_balance = await get_user_balance(user_tg_id)
        if user_balance < total_price:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {total_price} —Ä—É–±.\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_balance} —Ä—É–±.", reply_markup=get_main_menu_button())
            return
        
        await update_user_balance_after_buy(user_tg_id, -total_price)
        await create_purchases(user_tg_id, category_id, available_items)
        await delete_items(available_items)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
        items_info = "\n".join(
            f"{item.login}"
            for item in available_items
        )
        
        # –ï—Å–ª–∏ –ø–æ—á—Ç –º–µ–Ω—å—à–µ 5, –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if quantity < 5:
            await message.answer(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ {quantity} —à—Ç.\n\n"
                f"üí∏ –°–ø–∏—Å–∞–Ω–æ: {total_price} —Ä—É–±.\n\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n\n"
                f"üì¶ –î–∞–Ω–Ω—ã–µ:\n\n{items_info}",
                reply_markup=get_after_purchase_button(user_tg_id)
            )
        else:  # –ï—Å–ª–∏ –ø–æ—á—Ç –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 5, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ {quantity} —à—Ç.\n\n"
                f"üí∏ –°–ø–∏—Å–∞–Ω–æ: {total_price} —Ä—É–±.\n\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n\n",
                reply_markup=get_after_purchase_button(user_tg_id)
            )
            await message.answer(
                f"üì¶ –î–∞–Ω–Ω—ã–µ:\n\n{items_info}"
            )
    
        await state.clear()
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_button())
        print(f"–û—à–∏–±–∫–∞ –≤ handle_buy_quantity: {e}")

@router.callback_query(F.data == 'top_up')
async def add_items(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        await state.clear()
        await state.set_state(ItemStates.category)
        await callback.message.edit_text(
            'üì• –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:',
            reply_markup=await add_category_keyboard(await get_categories())
        )
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_button())
        print(f"–û—à–∏–±–∫–∞ –≤ add_items: {e}")

@router.callback_query(F.data.startswith('add_'))
async def add_items_2(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        category_id = callback.data.split('_')[1]
        await state.update_data(category_id=category_id)
        await state.set_state(ItemStates.file)
        await callback.message.answer('üì§ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –ª–æ–≥–∏–Ω–∞–º–∏ (–∫–∞–∂–¥—ã–π –ª–æ–≥–∏–Ω –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ).')
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_button())

@router.message(ItemStates.file)
async def add_items_3(message: Message, state: FSMContext):
    try:
        if not message.document:
            await message.answer('üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.', reply_markup=get_main_menu_button())
            return

        data = await state.get_data()
        category_id = data.get('category_id')

        file_id = message.document.file_id
        file = await message.bot.get_file(file_id)
        file_path = file.file_path

        downloaded_file = await message.bot.download_file(file_path)
        file_content = downloaded_file.read().decode('utf-8')

        await add_items_from_file(category_id, file_content)
        await state.clear()
        await message.answer('‚úÖ –¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!', reply_markup=get_main_menu_button())
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_button())

@router.callback_query(F.data.startswith('my_profile_'))
async def give_user_profile(callback: CallbackQuery):
    try:
        await callback.answer()
        tg_id = callback.data.split('_')[2]
        balance, top_up = await get_user_balance_and_top_up(tg_id)
        await callback.message.edit_text(
            f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n'
            f'üí≥ –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: {top_up} —Ä—É–±.\n'
            '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=await create_user_profile(callback.from_user.id)
        )
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_button())
        print(f"–û—à–∏–±–∫–∞ –≤ give_user_profile: {e}")

@router.callback_query(F.data.startswith('history_'))
async def cmd_profile_history(callback: CallbackQuery):
    try:
        await callback.answer()
        tg_id = int(callback.data.split('_')[1])
        purchase_history = await get_purchase_history(tg_id)
        
        if not purchase_history:
            await callback.message.answer("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞", reply_markup=get_main_menu_button())
            return
        
        response = "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:\n\n"
        for category, items in purchase_history.items():
            response += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            for item in items:
                response += f"{item}\n"
            response += "\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'my_profile_{callback.from_user.id}')],
            [InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='get_menu')]
        ])
        
        await callback.message.edit_text(response, reply_markup=keyboard)
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_button())
        print(f"–û—à–∏–±–∫–∞ –≤ cmd_profile_history: {e}")

@router.callback_query(F.data.startswith('top_up_'))
async def create_top_up(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text('üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
                             reply_markup= await choose_payment(callback.from_user.id))
    await state.set_state(OrderState.waiting_for_payment)

@router.callback_query(F.data.startswith('lolz_'))
async def create_lolz_payment(callback: CallbackQuery, state: FSMContext):
    st = await state.get_state()
    if st != OrderState.choosing_payment:
        return
    try:
        await callback.answer()
        await state.clear()
        tg_id = int(callback.data.split('_')[1])
        await state.update_data(tg_id=tg_id)
        await callback.message.edit_text(
            'üí≥ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:',
            reply_markup=await top_up_cancel_kb(tg_id)
        )
        await state.set_state(LolzPayment.amount)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_lolz_payment: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_button())

@router.message(LolzPayment.amount)
async def top_up_end(message: Message, state: FSMContext):
    try:
        if not message.text.isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=get_main_menu_button())
            return
        
        amount = int(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!", reply_markup=get_main_menu_button())
            return
        
        order_id = os.urandom(15).hex()
        pay_url = LOLZ_TOKEN.get_payment_link(amount=amount, comment=order_id)
        await state.set_state(OrderState.waiting_for_payment)
        await message.answer(
            f'üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ {amount} —Ä—É–±. –ø–æ —Å—Å—ã–ª–∫–µ: {pay_url}\n\n'
            '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É".',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_lolz_payment_{order_id}_{amount}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã", callback_data="cancel_payment")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ top_up_end: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_button())


@router.callback_query(F.data.startswith('check_lolz_payment_'))
async def check_lolz_payment(callback: CallbackQuery, state: FSMContext):
    st = await state.get_state()
    if st != OrderState.waiting_for_payment:
        return
    try:
        await callback.answer()

        order_id = callback.data.split('_')[3]
        amount = int(callback.data.split('_')[4])
        tg_id = callback.from_user.id

        async with async_session() as session:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º async_session
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            if await is_payment_processed(session, order_id):
                await callback.message.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", reply_markup=get_main_menu_button())
                return

            payment_info = await LOLZ_TOKEN.check_status_payment(amount, comment=str(order_id))
            if payment_info:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if await save_payment_order(session, order_id):
                    await update_user_balance(tg_id, amount)
                    await callback.message.answer(
                        f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! \n–°—É–º–º–∞: {amount} —Ä—É–±.\n\n"
                        f"–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω. üéâ",
                        reply_markup=get_main_menu_button()
                    )
                else:
                    await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.", reply_markup=get_main_menu_button())
            else:
                await callback.message.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_button())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_lolz_payment: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_button())



@router.callback_query(F.data.startswith('check_crypto_payment_'))
async def check_crypto_payment(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()

        order_id = callback.data.split('_')[3]
        amount = int(callback.data.split('_')[4])
        tg_id = callback.from_user.id

        async with async_session() as session:
            if await is_payment_processed(session, order_id):
                await callback.message.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", reply_markup=get_main_menu_button())
                return

            invoices = await crypto_Bot.get_invoices(invoice_ids=[order_id], count=1)
            if invoices:
                invoice = invoices[0]
                if invoice.paid_at is not None and invoice.status != "active":
                    if await save_payment_order(session, order_id):
                        await update_user_balance(tg_id, amount)
                        await callback.message.answer(
                            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! \n\n"
                            f"üí≥ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {str(amount)} RUB\n"
                            f"–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω. üéâ",
                            reply_markup=get_main_menu_button()
                        )
                    else:
                        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.", reply_markup=get_main_menu_button())
                else:
                    await callback.message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                await callback.message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_crypto_payment: {e}")
        await callback.message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {str(e)}",
                                      reply_markup=get_main_menu_button())

@router.callback_query(F.data.startswith('crypto_'))
async def top_up_user_balance_crypto(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        await state.clear()
        await callback.message.edit_text(
            'üí≥ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:',
            reply_markup=await top_up_cancel_kb(callback.from_user.id)
        )
        await state.set_state(CryptoPayment.amount)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ top_up_user_balance_crypto: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_button())

@router.message(CryptoPayment.amount)
async def top_up_end_crypto(message: Message, state: FSMContext):
    try:
        if not message.text.isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=get_main_menu_button())
            return
        
        amount = int(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!", reply_markup=get_main_menu_button())
            return
        await state.clear()
        order = await crypto_Bot.create_invoice(amount / USD_RUB_COURSE, currency_type="crypto", asset="USDT")

        pay_url = order.pay_url
        order_id = order.invoice_id
        await message.answer(
            f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ {amount / USD_RUB_COURSE} USDT –ø–æ —Å—Å—ã–ª–∫–µ:\n{pay_url}\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_crypto_payment_{order_id}_{amount}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã", callback_data="cancel_payment")
                ]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ top_up_end_crypto: {e}")
        await message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data == 'cancel_payment')
async def cancel_payment(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.answer(
        "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                                      reply_markup=  get_main_menu_button()
    )

@router.callback_query(F.data == 'big_catalog')
async def get_big_catalog(callback: CallbackQuery):
    try:
        await callback.answer()
        categories = await get_categories()
        response = "üìÇ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        
        for category in categories:
            items = await get_available_items(category.id, 1000)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if items:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                response += f"{category.name} ({len(items)} –ø–æ—á—Ç):\n"
                for item in items:
                    response += f"{item.login}\n"
                response += "\n"
        
        if response == "üìÇ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:\n\n":  # –ï—Å–ª–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
            response = "üì≠ –í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n–ú–µ–Ω—é - /start"
        
        await callback.message.edit_text(response, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='get_menu')]
        ]))
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
                                      reply_markup= get_main_menu_button())
        print(f"–û—à–∏–±–∫–∞ –≤ get_big_catalog: {e}")

@router.callback_query(F.data == 'change_balance')
async def change_user_balance(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Userchange.tg_id)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å",
        reply_markup=get_main_menu_button()
    )

@router.message(Userchange.tg_id)
async def process_tg_id(message: Message, state: FSMContext):
    try:
        tg_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ).")
        return

    await state.update_data(tg_id=tg_id)
    await state.set_state(Userchange.new_balance)

    user_balance = await get_user_balance(tg_id)
    await message.answer(f'üí∞ –ë–∞–ª–∞–Ω—Å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_balance}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')

@router.message(Userchange.new_balance)
async def set_new_user_balance(message: Message, state: FSMContext):
    try:
        new_balance = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (—á–∏—Å–ª–æ).")
        return

    data = await state.get_data()
    tg_id = data['tg_id']

    if await update_user_balance_in_db(tg_id, new_balance):
        await message.answer('‚úÖ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', reply_markup=get_main_menu_button())
    else:
        await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=get_main_menu_button())

    await state.clear()

@router.callback_query(F.data=='manage_categories')
async def admin_manage_cat(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é', 
                                    reply_markup=await manage_category_keyboard(await get_categories()))

@router.callback_query(F.data=='new_category')
async def add_new_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(NewCategory.name)
    await callback.message.edit_text('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')

@router.message(NewCategory.name)
async def handle_new_category_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(NewCategory.desc)
    await message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')

@router.message(NewCategory.desc)
async def handle_new_category_desc(message: Message, state: FSMContext):
    await state.update_data(desc=message.text)
    await state.set_state(NewCategory.price)
    await message.answer('üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–∑–∞ –æ–¥–Ω—É –ø–æ—á—Ç—É) –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')

@router.message(NewCategory.price)
async def handle_new_category_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        return
    
    await state.update_data(price=message.text)
    data = await state.get_data()
    name, desc, price = data['name'], data['desc'], data['price']
    if await admin_add_new_category_db(name, desc, int(price)):
        await message.answer(f'‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
                             reply_markup=get_main_menu_button())

@router.callback_query(F.data.startswith('manage_category_'))
async def admin_manage_category_admin(callback: CallbackQuery):
    category_id = int(callback.data.split('_')[2])
    await callback.answer()
    category = await get_category(category_id)
    await callback.message.edit_text(f'üìÅ –ò–º—è: {category.name}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {category.desc}\nüíµ –¶–µ–Ω–∞: {category.price}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                                     reply_markup=await manage_one_cat(int(category_id)))


@router.callback_query(F.data.startswith('delete_cat_data_'))
async def delete_category_by_id_admin(callback: CallbackQuery):
    try:
        await callback.answer()
        category_id = int(callback.data.split('_')[3])
        result = await admin_delete_category_db(category_id)
        
        if result:
            await callback.message.answer(
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n–í–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –ø—É—Å—Ç–∞',
                reply_markup=get_main_menu_button()
            )
        else:
            await callback.message.answer(
                '‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!',
                reply_markup=get_main_menu_button()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_category_by_id_admin: {e}")
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_button()
        )


@router.callback_query(F.data.startswith('delete_cat_'))
async def delete_category_by_id_admin(callback: CallbackQuery):
    try:
        await callback.answer()
        category_id = int(callback.data.split('_')[2])
        
        result = await admin_delete_category(category_id)
        
        if not result:
            await callback.message.answer(
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                reply_markup=get_main_menu_button()
            )
        else:
            await callback.message.answer(
                '‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!',
                reply_markup=get_main_menu_button()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_category_by_id_admin: {e}")
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_button()
        )


@router.callback_query(F.data.startswith('cat_change_'))
async def change_cat_params(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    operation = callback.data.split('_')[2]
    cat_id = callback.data.split('_')[3]
    await state.set_state(EditCategory.cat_id)
    await state.update_data(cat_id=cat_id)
    if operation == 'name':
        await state.set_state(EditCategory.name)
        await callback.message.edit_text('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')
    elif operation == 'desc':
        await state.set_state(EditCategory.desc)
        await callback.message.edit_text('üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')
    elif operation == 'price':
        await state.set_state(EditCategory.price)
        await callback.message.edit_text('üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')

@router.message(EditCategory.name)
async def admin_edit_category_name_admin(message: Message, state: FSMContext):
    name = message.text
    data = await state.get_data()
    cat_id = data['cat_id']
    await state.clear()
    if await edit_cat_name_db(name, cat_id):
        await message.answer(f'‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ',
                             reply_markup=get_main_menu_button())
    else:
        await message.answer(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è',
                             reply_markup=get_main_menu_button())
        
@router.message(EditCategory.desc)
async def admin_edit_category_desc_admin(message: Message, state: FSMContext):
    desc = message.text
    data = await state.get_data()
    cat_id = data['cat_id']
    await state.clear()
    if await edit_cat_desc_db(desc, cat_id):
        await message.answer(f'‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ',
                             reply_markup=get_main_menu_button())
    else:
        await message.answer(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                             reply_markup=get_main_menu_button())

@router.message(EditCategory.price)
async def admin_edit_category_price_admin(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
    price = int(message.text)
    data = await state.get_data()
    cat_id = data['cat_id']
    await state.clear()
    if await edit_cat_price_db(price, cat_id):
        await message.answer(f'‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞',
                             reply_markup=get_main_menu_button())
    else:
        await message.answer(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É',
                             reply_markup=get_main_menu_button())


